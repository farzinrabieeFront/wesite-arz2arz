/** package import */
import { useState, useEffect, useRef } from "react";
import { Form, Formik, Field } from "formik";
import { Col } from "react-bootstrap";
import { FaChevronLeft } from "react-icons/all";
import { useNavigate, useLocation, useParams } from "react-router-dom";
import { useSelector } from "react-redux";
import { create, all } from "mathjs";
/** internal import */
import Styles from "./Limit.module.scss";
import { orderServices } from "../../../../../services";
import { Toastify } from "../../../../../utils";
import { useOrder } from "../../../../../context/OrderServises";
/** components import */
import CustomizedButton from "../../../../../components/form/button/Button";
import InputElement, {
  amountFilter,
} from "../../../../../common/element/formik-inputs/input/Input";
import RangeSliderElement from "../../../../../common/element/formik-inputs/range-slider/RangeSlider";
import MarketInput from "../inputs/market-input/MarketInput";

const math = create(all, {
  number: "BigNumber",
  preciaion: 64,
});

export default function Limit({ refreshHistory }) {
  const formikRef = useRef(null);
  const { pathname } = useLocation();
const navigate = useNavigate();
  const { spot } = useParams();
  const { marketInfo, usdtMarkets, markets } = useSelector(
    (state) => state.market
  );
  const { LIMIT: internalFee } = useSelector((state) => state?.exchange?.fees);

  const { prices, balance } = useOrder();

  /** states & variables */
  const [loading, setLoading] = useState(false);
  const [maxDecimal, setMaxDecimal] = useState(0);
  const [maxPriceDecimal, setMaxPriceDecimal] = useState(0);
  const [minAmount, setMinAmount] = useState(0);
  const [infoMarket, setInfoMarket] = useState({});
  const [recieveAmount, setRecieveAmount] = useState(0);
  const [wageAmount, setWageAmount] = useState(0);
  const [baseAssetBalance, setBaseAssetBalance] = useState(0);
  const [base, setBase] = useState("");
  const [quote, setQuote] = useState("");

  useEffect(() => {
    document.title = "ارز تو ارز | معاملات - تبدیل ارز";
  }, []);

  useEffect(() => {
    const { type, market } = formikRef.current.values;

    if (market in marketInfo) {
      setInfoMarket(marketInfo[market]);
      const { LOT_SIZE_minQty, PRICE_FILTER_minPrice } = marketInfo[market];

      if (type === "sell") {
        LOT_SIZE_minQty.split(".")[1]
          .split("")
          .forEach((num, i) => {
            if (num !== "0") {
              setMaxDecimal(i + 1);
              return;
            }
          });
      } else {
        setMaxDecimal(8);
      }

      PRICE_FILTER_minPrice.split(".")[1]
        .split("")
        .forEach((num, i) => {
          if (num !== "0") {
            setMaxPriceDecimal(i + 1);
            return;
          }
        });
    }
  }, [formikRef.current, spot, marketInfo]);

  useEffect(() => {
    if (Object.keys(marketInfo).length && Object.keys(prices).length) {
      validateMethod(formikRef.current.values);
    }
  }, [prices, marketInfo]);

  const validateMethod = ({ type, amount, market, requestedPrice }) => {
    let errors = {},
      spot_balance = 0,
      trade_fee = 0,
      base_balance = 0,
      max_amount = 0,
      min_amount = 0,
      highestReqPrice = 0,
      lowestReqPrice = 0;

    let market_price = Number(prices[market] || 0);

    if (market_price) {
      lowestReqPrice = math.multiply(
        Number(infoMarket.PERCENT_PRICE_multiplierDown),
        market_price
      );
      highestReqPrice = math.multiply(
        Number(infoMarket.PERCENT_PRICE_multiplierUp),
        market_price
      );
    }

    if (market && "spotWallets" in balance) {
      base_balance = Number(balance.spotWallets[base]?.balance) || 0;
      if (base_balance !== baseAssetBalance) setBaseAssetBalance(base_balance);
    }

    if (type === "sell") {
      let internalLowest = math.divide(
        Number(infoMarket.MIN_NOTIONAL || 0),
        market_price
      );
      internalLowest = internalLowest === Infinity ? 0 : internalLowest;

      let externalLowest = math.divide(
        Number(infoMarket.MIN_NOTIONAL || 0),
        market_price
      );
      externalLowest = externalLowest === Infinity ? 0 : externalLowest;

      min_amount = math.max(internalLowest, externalLowest);
      if (min_amount) setMinAmount(min_amount);

      let internalhighest = math.multiply(
        Number(infoMarket.LOT_SIZE_maxQty || 0),
        market_price
      );
      let externalhighest = math.multiply(
        Number(infoMarket.LOT_SIZE_maxQty || 0),
        market_price
      );
      max_amount = math.min(internalhighest, externalhighest);

      trade_fee = math.add(
        math.divide(Number(internalFee), 100),
        Number(infoMarket.fee)
      );
    } else {
      let internalLowest = Number(infoMarket.MIN_NOTIONAL || 0);
      let externalLowest = Number(infoMarket.MIN_NOTIONAL || 0);
      min_amount = math.max(internalLowest, externalLowest);
      if (min_amount) setMinAmount(min_amount);

      let internalhighest = Number("99999999" || 0);
      let externalhighest = Number("99999999" || 0);
      max_amount = math.min(internalhighest, externalhighest);

      trade_fee = math.add(
        math.divide(Number(internalFee), 100),
        Number(infoMarket.fee)
      );
    }

    if (type === "sell") {
      setBase(infoMarket.baseAsset);
      setQuote(infoMarket.quoteAsset);
    } else {
      setBase(infoMarket.quoteAsset);
      setQuote(infoMarket.baseAsset);
    }

    if (Number(amount) && Number(requestedPrice) && market_price) {
      if (type === "sell") {
        let quote_amount = math.multiply(
          Number(amount),
          Number(requestedPrice)
        );

        let wage = math.multiply(quote_amount, trade_fee);
        setWageAmount(wage);

        let recieve_amount = math.subtract(quote_amount, wage);
        setRecieveAmount(recieve_amount);
      } else {
        let quote_amount = math.divide(Number(amount), Number(requestedPrice));

        let wage = math.multiply(quote_amount, trade_fee);
        setWageAmount(wage);

        let recieve_amount = math.subtract(quote_amount, wage);
        setRecieveAmount(recieve_amount);
      }
    }

    // if (Number(amount)) {
    //   let one_percentage = math.divide(spot_balance, 100);
    //   let percentage_amount = math.divide(Number(amount), one_percentage);
    // }

    if (!amount) {
      setRecieveAmount(0);
      setWageAmount(0);
      errors.amount = "این فیلد الزامی است.";
    } else if (/[\u0660-\u0669]/.test(amount)) {
      errors.amount = "فقط عدد لاتین وارد کنید.";
    } else if (
      !new RegExp(/^(?=.)([+-]?([0-9]*)(\.([0-9]+))?)$/, "g").test(amount)
    ) {
      errors.amount = "فقط عدد وارد کنید.";
    } else if (
      !new RegExp(/^[+-]?([0-9]+\.?[0-9]*|\.[0-9]+)$/, "g").test(amount)
    ) {
      errors.amount = "فرمت عدد وارد شده درست نیست.";
    } else if (math.larger(Number(amount), baseAssetBalance)) {
      errors.amount = `دارایی شما کافی نیست`;
    } else if (minAmount && math.smallerEq(Number(amount), minAmount)) {
      errors.amount = `حداقل مقدار مجاز برابر ( ${base} )${math
        .fix(minAmount, maxDecimal)
        .toString()} است`;
      // } else if (
      //   maxDecimal &&
      //   math.larger(amount.split(".")[1].length, maxDecimal)
      // ) {
      //   errors.amount = `حداکثر تا ${maxDecimal} رقم اعشار مجاز میباشد.`;
    } else if (max_amount && math.larger(Number(amount), max_amount)) {
      errors.amount = `حداکثر مقدار مجاز پرداختی برابر ${max_amount} است`;
    }

    if (!requestedPrice) {
      errors.requestedPrice = "این فیلد الزامی است.";
      setRecieveAmount(0);
    } else if (/[\u0660-\u0669]/.test(requestedPrice)) {
      errors.requestedPrice = "فقط عدد لاتین وارد کنید.";
    } else if (
      !new RegExp(/^(?=.)([+-]?([0-9]*)(\.([0-9]+))?)$/, "g").test(
        requestedPrice
      )
    ) {
      errors.requestedPrice = "فقط عدد وارد کنید.";
    } else if (
      !new RegExp(/^[+-]?([0-9]+\.?[0-9]*|\.[0-9]+)$/, "g").test(requestedPrice)
    ) {
      errors.requestedPrice = "فرمت عدد وارد شده درست نیست.";
      // } else if (
      //   maxPriceDecimal &&
      //   math.larger(requestedPrice.split(".")[1].length, maxPriceDecimal)
      // ) {
      //   errors.requestedPrice = `حداکثر تا ${maxPriceDecimal} رقم اعشار مجاز میباشد.`;
    } else if (
      lowestReqPrice &&
      math.smaller(Number(requestedPrice), Number(lowestReqPrice))
    ) {
      errors.requestedPrice = `حداقل قیمت مجاز درخواستی برابر ( ${spot
        .split("-")
        .join("")} )${math
        .fix(lowestReqPrice, maxPriceDecimal)
        .toString()} است`;
    } else if (
      highestReqPrice &&
      math.larger(Number(requestedPrice), Number(highestReqPrice))
    ) {
      errors.requestedPrice = `حداکثر قیمت مجاز درخواستی برابر ( ${spot
        .split("-")
        .join("")} )${math
        .fix(requestedPrice, maxPriceDecimal)
        .toString()} است`;
    }

    return errors;
  };

  const onSubmit = async ({ amount, requestedPrice }) => {
    try {
      const body = {
        baseAsset: base,
        quoteAsset: quote,
        amount,
        requestedPrice,
      };

      setLoading(true);
      const { data, status } = await orderServices.limit(body);
      if (status === 202) {
        Toastify.success(data.message);
      }
    } catch (error) {
      Toastify.error(error.message);
    } finally {
      setLoading(false);
      refreshHistory();
    }
  };

  return (
    <Formik
      innerRef={formikRef}
      enableReinitialize={true}
      validateOnChange={true}
      initialValues={{
        type: "sell",
        amount: "",
        market: "",
        requestedPrice: "",
      }}
      validate={validateMethod}
      onSubmit={onSubmit}
    >
      {({ isValid, dirty, values, setFieldValue }) => (
        <Form className="d-flex flex-wrap justify-content-center align-items-stretch px-2 py-3">
          <Col xs={12} className="px-1 mb-4">
            <Field
              as={MarketInput}
              name="market"
              labelClassName="size-5 text-gray-3"
              type={values.type}
              changeTypeHandler={(type) => setFieldValue("type", type)}
            />
          </Col>

          <Col xs={12} className="px-1 mb-2">
            <div className="col-12">
              <span className="size-5 text-gray-2">قیمت</span>
            </div>

            <Field
              as={InputElement}
              name="requestedPrice"
              tradeInput
              className="en fw-500"
              maxLength={15}
              onKeyDown={(evt) => {
                let current_value = math.largerEq(Number(evt.key), 0)
                  ? [evt.target.value, evt.key].join("")
                  : evt.target.value;

                if (current_value.includes(".")) {
                  if (
                    math.larger(
                      current_value.split(".")[1].length,
                      maxPriceDecimal
                    )
                  ) {
                    evt.preventDefault();
                  }
                }
              }}
              onPaste={(evt) => {
                let clipboardData, pastedData;
                evt.stopPropagation();

                clipboardData = evt.clipboardData || window.clipboardData;
                pastedData = clipboardData.getData("Text");

                if (!new RegExp(/^[\d.]+$/, "g").test(pastedData)) {
                  evt.preventDefault();
                } else if (math.largerEq(pastedData.split(".").length, 2)) {
                  evt.preventDefault();
                  setFieldValue(
                    "amount",
                    pastedData.split(".").slice(0, 2).join(".")
                  );
                }
              }}
            />
          </Col>

          <Col xs={12} className="px-1 mb-2">
            <div className="d-flex justify-content-between  ">
              <div>
                <span className="size-5 text-gray-2">مقدار</span>
                <span className="size-5 text-gray-3 en fw-500 mx-1">
                  {base}
                </span>
              </div>

              <div
                className="d-flex align-items-center flex-row-reverse justify-content-end size-5 pointer"
                onClick={async () => {
                  formikRef.current.setFieldValue(
                    "amount",
                    math.fix(minAmount, maxDecimal).toString()
                  );
                }}
              >
                <span className="size-5 text-gray-4">
                  {math.fix(minAmount, maxDecimal).toString()}
                </span>
                <span className="size-5 text-gray-2 mx-1">{base}</span>
                <span className="size-5 text-gray-2 ltr">: حداقل خرید</span>
              </div>
            </div>

            <Field
              as={InputElement}
              name="amount"
              prepend={
                <span className="size-5 fw-500 text-gray-1 en">{base}</span>
              }
              tradeInput
              className="en fw-500"
              maxLength={15}
              onKeyPress={amountFilter}
              onKeyDown={(evt) => {
                let current_value = math.largerEq(Number(evt.key), 0)
                  ? [evt.target.value, evt.key].join("")
                  : evt.target.value;

                if (current_value.includes(".")) {
                  if (
                    math.larger(current_value.split(".")[1].length, maxDecimal)
                  ) {
                    evt.preventDefault();
                  }
                }
              }}
              onPaste={(evt) => {
                let clipboardData, pastedData;
                evt.stopPropagation();

                clipboardData = evt.clipboardData || window.clipboardData;
                pastedData = clipboardData.getData("Text");

                if (!new RegExp(/^[\d.]+$/, "g").test(pastedData)) {
                  evt.preventDefault();
                } else if (math.largerEq(pastedData.split(".").length, 2)) {
                  evt.preventDefault();
                  setFieldValue(
                    "amount",
                    pastedData.split(".").slice(0, 2).join(".")
                  );
                }
              }}
            />
          </Col>

          <Col xs={12} className="px-2 mb-4">
            <Field
              as={RangeSliderElement}
              name="amount"
              variant="#00BABA"
              total={baseAssetBalance}
              maxDecimal={maxDecimal}
            />
          </Col>

          <Col xs={12} className="px-1 mb-2">
            <div className="d-flex justify-content-between  ween px-1">
              <div>
                <span className="size-5 text-gray-2">جمع</span>{" "}
                <span className="size-5 en fw-500 text-gray-3">{quote}</span>
                <span className="size-5 text-gray-2"> با کسر کارمزد</span>
              </div>

              <div className="d-flex align-items-center ">
                <span className="size-5 text-gray-2">کارمزد : </span>
                <span className="size-5 en text-gray-2 text-gray-2 mx-1">
                  {quote}
                </span>
                <span className="size-5 en text-gray-4">
                  {math.fix(wageAmount, maxDecimal).toLocaleString()}
                </span>
              </div>
            </div>
            <InputElement
              name="get_amount"
              tradeInput
              prepend={
                <span className="size-5 fw-500 text-gray-1 en">{quote}</span>
              }
              readOnly
              className="en fw-500"
              value={math.fix(recieveAmount, maxDecimal).toLocaleString()}
            />
          </Col>

          <Col xs={12} className="px-1">
            <div className="d-flex justify-content-end">
              <CustomizedButton
                isFullWidth
                type="submit"
                leftIcon={<FaChevronLeft size="20" />}
                className="tradeBtn size-3 fw-700"
                size="sm"
                variant="blue"
                disabled={!(isValid && dirty)}
                loading={loading}
              >
                دریافت
                <span className="en fw-700 me-2">{quote}</span>
              </CustomizedButton>
            </div>
          </Col>
        </Form>
      )}
    </Formik>
  );
}
