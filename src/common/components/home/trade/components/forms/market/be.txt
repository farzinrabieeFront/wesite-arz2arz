/** internal import */
import { useState, useEffect, useRef, memo } from "react";
import { useOrder } from "../../../../../context/OrderServises";
import { Toastify } from "../../../../../utils";
import { orderServices } from "../../../../../services";

/** external import */
import { Form, Formik, Field } from "formik";
import { Col } from "react-bootstrap";
import { FaChevronLeft } from "react-icons/all";
import { useParams } from "react-router-dom";
import { useSelector } from "react-redux";
import { create, all } from "mathjs";
import * as yup from "yup";

/** components import */
import CustomizedButton from "../../../../../components/form/button/Button";
import InputElement, {
  amountFilter,
} from "../../../../../common/element/formik-inputs/input/Input";
import RangeSliderElement from "../../../../../common/element/formik-inputs/range-slider/RangeSlider";
import MarketInput from "../inputs/market-input/MarketInput";
import AmountInput from "../../../../../common/element/formik-inputs/amount-input/AmountInput";

const math = create(all, {
  number: "BigNumber",
  preciaion: 64,
});

function Market({ refreshHistory }) {
  const formikRef = useRef(null);
  const { spot } = useParams();
  const { prices, balance } = useOrder();

  const { market, exchange } = useSelector((state) => state);
  const { marketInfo } = market;
  const { MARKET: internalFee = 0 } = exchange.fees;

  const [loading, setLoading] = useState(false);
  const [minimumAmount, setMinimumAmount] = useState(0);
  const [maximumAmount, setMaximumAmount] = useState(0);
  const [totalFee, setTotalFee] = useState(0);
  const [receivedAmount, setReceivedAmount] = useState(0);
  const [maximumDecimalAmount, setMaximumDecimalAmount] = useState(0);
  const [baseAssetBalance, setBaseAssetBalance] = useState(0);
  const [base, setBase] = useState("");
  const [quote, setQuote] = useState("");

  useEffect(() => {
    formikRef.current.setFieldValue("amount", "0");
  }, [base, quote]);

  useEffect(() => {
    formikRef.current.setFieldValue("type", "sell");
  }, [spot]);

  useEffect(() => {
    if (Object.keys(marketInfo).length && Object.keys(prices).length) {
      vaildationMethod(formikRef.current.values);
    }
  }, [prices, marketInfo]);

  const vaildationMethod = ({ type, amount, market }) => {
    console.log(type);
    let spotWallets = balance.spotWallets || {},
      market_price = Number(prices[market] || 0),
      {
        LOT_SIZE_minQty = 0,
        LOT_SIZE_maxQty = 0,
        MIN_NOTIONAL = 0,
        fee = 0,
        baseAsset = "",
        quoteAsset = "",
      } = marketInfo[market] || {};

    // calculate lowest amount
    const lowest =
      type === "sell"
        ? math.divide(Number(MIN_NOTIONAL), market_price)
        : Number(MIN_NOTIONAL);
    if (lowest && lowest !== Infinity && lowest !== minimumAmount)
      setMinimumAmount(lowest);

    // calculate highest amount
    const highest =
      type === "sell"
        ? Number(LOT_SIZE_maxQty)
        : math.multiply(Number(LOT_SIZE_maxQty), market_price);
    if (highest && highest !== Infinity && highest !== maximumAmount)
      setMaximumAmount(highest);

    // calculate max decimal amount
    if (type === "sell" && LOT_SIZE_minQty) {
      LOT_SIZE_minQty.split(".")[1]
        .split("")
        .forEach((num, i) => {
          if (num !== "0") {
            setMaximumDecimalAmount(i + 1);
            return;
          }
        });
    } else setMaximumDecimalAmount(8);

    // calculate recieve and fee amount
    if (Number(amount) && market_price) {
      let quote_amount = 0;

      quote_amount =
        type === "sell"
          ? math.multiply(Number(amount), market_price)
          : math.divide(Number(amount), market_price);

      const total_fee = math.add(
        math.divide(Number(internalFee), 100),
        Number(fee)
      );

      const fee_amount = math.multiply(quote_amount, total_fee);
      const recieve_amount = math.subtract(quote_amount, fee_amount);

      setTotalFee(fee_amount);
      setReceivedAmount(recieve_amount);
    } else {
      setTotalFee(0);
      setReceivedAmount(0);
    }

    setBaseAssetBalance(Number(spotWallets[base]?.balance || 0));

    setBase(type === "sell" ? baseAsset : quoteAsset);
    setQuote(type === "sell" ? quoteAsset : baseAsset);
  };

  const vaildationMethodSchema = () => {
    let schema = {
      amount: yup
        .number("فقط عدد لاتین وارد کنید.")
        .required("این فیلد الزامی است.")
        .min(
          minimumAmount,
          `حداقل مقدار مجاز برابر ${base} ${math
            .ceil(minimumAmount, maximumDecimalAmount)
            .toString()} است`
        )
        .max(
          maximumAmount,
          `حداکثر مقدار مجاز پرداختی برابر ${maximumAmount.toLocaleString()} ${base} است`
        )
        .lessThan(baseAssetBalance, "موجودی حسابت کافی نیست"),
    };

    return yup.object().shape(schema);
  };

  const onSubmit = async ({ amount }) => {
    try {
      const body = {
        baseAsset: base,
        quoteAsset: quote,
        amount,
      };

      setLoading(true);
      const { data, status } = await orderServices.market(body);
      if (status === 202) {
        Toastify.success(data.message);
        formikRef.current.setFieldValue("amount", "0");
      }
    } catch (error) {
      Toastify.error(error.message);
    } finally {
      setLoading(false);
      refreshHistory();
    }
  };

  return (
    <Formik
      innerRef={formikRef}
      enableReinitialize
      validateOnChange={true}
      initialValues={{
        type: "sell",
        amount: "",
        market: spot.split("-").join(""),
      }}
      validationSchema={vaildationMethodSchema}
      validate={vaildationMethod}
      onSubmit={onSubmit}
    >
      {({ isValid, dirty, values, setFieldValue }) => (
        <Form className="d-flex flex-wrap justify-content-center align-items-stretch px-2 py-3">
          <Col xs={12} className="px-1 mb-4">
            <Field
              as={MarketInput}
              name="market"
              labelClassName="size-5 text-gray-3"
              type={values.type}
              changeTypeHandler={(type) => {
                setFieldValue("type", type);
              }}
            />
          </Col>

          <Col xs={12} className="px-1 mb-2">
            <InputElement
              label="قیمت"
              name="requestedPrice"
              tradeInput
              prepend={<span className="size-5 fw-500 text-gray-1 en">{spot.split("-").join(" / ")}</span>}
              className="en fw-500"
              readOnly
              value={prices[values.market]?.toString() || "0"}
            />
          </Col>

          <Col xs={12} className="px-1 mb-2">
            <Field
              as={AmountInput}
              label="مقدار"
              name="amount"
              symbol={base}
              limit={{
                label: "حداقل مقدار",
                value: minimumAmount,
              }}
              sliderVariant="#00BABA"
              maxDecimal={maximumDecimalAmount}
              maxValue={baseAssetBalance}
              minValue={0}
            />
          </Col>

          {/* <Col xs={12} className="px-1 mb-2">
            <div className="d-flex justify-content-between  ">
              <div>
                <span className="size-5 text-gray-2">مقدار</span>
                <span className="size-5 text-gray-3 en fw-500 mx-1">
                  {base}
                </span>
              </div>

              <div
                className="d-flex align-items-center flex-row-reverse justify-content-end size-5 pointer"
                onClick={async () => {
                  formikRef.current.setFieldValue(
                    "amount",
                    math.ceil(minimumAmount, maximumDecimalAmount).toString()
                  );
                }}
              >
                <span className="size-5 text-gray-4">
                  {math.ceil(minimumAmount, maximumDecimalAmount)}
                </span>
                <span className="size-5 text-gray-2 mx-1">{base}</span>
                <span className="size-5 text-gray-2 ltr">
                  : حداقل مقدار خرید
                </span>
              </div>
            </div>

            <Field
              as={InputElement}
              name="amount"
              prepend={
                <span className="size-5 fw-500 text-gray-1 en">{base}</span>
              }
              tradeInput
              type="tel"
              inputMode="decimal"
              maxLength={15}
              className="en fw-500"
              onKeyPress={amountFilter}
              onKeyDown={(evt) => {
                let current_value = math.largerEq(Number(evt.key), 0)
                  ? [evt.target.value, evt.key].join("")
                  : evt.target.value;

                if (current_value.includes(".")) {
                  if (
                    math.larger(
                      current_value.split(".")[1].length,
                      maximumDecimalAmount
                    )
                  ) {
                    evt.preventDefault();
                  }
                }
              }}
              onPaste={(evt) => {
                let clipboardData, pastedData;
                evt.stopPropagation();

                clipboardData = evt.clipboardData || window.clipboardData;
                pastedData = clipboardData.getData("Text");

                if (!new RegExp(/^[\d.]+$/, "g").test(pastedData)) {
                  evt.preventDefault();
                } else if (math.largerEq(pastedData.split(".").length, 2)) {
                  evt.preventDefault();
                  setFieldValue(
                    "amount",
                    pastedData.split(".").slice(0, 2).join(".")
                  );
                }
              }}
            />
          </Col> */}

          {/* <Col xs={12} className="px-2 mb-4">
            <Field
              as={RangeSliderElement}
              name="amount"
              variant="#00BABA"
              total={baseAssetBalance}
              maxDecimal={maximumDecimalAmount}
            />
          </Col> */}

          <Col xs={12} className="px-1 mb-2">
            <div className="d-flex justify-content-between px-1">
              <div>
                <span className="size-5 text-gray-2">جمع</span>{" "}
                <span className="size-5 en fw-500 text-gray-3">{quote}</span>{" "}
                <span className="size-5 text-gray-2">با کسر کارمزد</span>
              </div>

              <div className="d-flex align-items-center ">
                <span className="size-5 text-gray-2">کارمزد : </span>
                <span className="size-5 en text-gray-2 text-gray-2 mx-1">
                  {quote}
                </span>
                <span className="en size-5 text-gray-4">
                  {Number(totalFee)
                    .toFixed(0)
                    .toString()
                    .replace(/(\.\d+?)0+\b/g, "$1")
                    .toLocaleString()}
                </span>
              </div>
            </div>
            <InputElement
              name="get_amount"
              tradeInput
              className="en fw-500"
              prepend={
                <span className="size-5 fw-500 text-gray-1 en">{quote}</span>
              }
              readOnly
              value={math
                .fix(receivedAmount, maximumDecimalAmount)
                .toLocaleString()}
            />
          </Col>

          <Col xs={12} className="px-1">
            <div className="d-flex justify-content-end">
              <CustomizedButton
                isFullWidth
                leftIcon={<FaChevronLeft size="20" />}
                type="submit"
                className="tradeBtn size-3 fw-400 py-1"
                size="sm"
                variant="blue"
                disabled={!(isValid && dirty)}
                loading={loading}
              >
                دریافت
                <span className="en fw-600 me-2">
                  {values.type === "sell"
                    ? spot.split("-")[1]
                    : spot.split("-")[0]}
                </span>
              </CustomizedButton>
            </div>
          </Col>
        </Form>
      )}
    </Formik>
  );
}

export default memo(Market);
